<?php

/**********************************************************************************************************/
/*** Master validation function for the RC-Res form *******************************************************/
/**********************************************************************************************************/
/**  LAST UPDATED 20140123                                                                               **/
/**
 * Master validation function for the customer survey form - uses per-stage 
 * validation and calls functions for each one.
 * 
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function rc_res_form_page_one_validate($form, &$form_state) {
  $checkboxErrorMsg1 = 'Please select a checkbox before clicking on the Delete button.';
  $checkboxErrorMsg2 = 'Please select a checkbox before clicking on the Delete button.';
  $checkboxErrorMsg3 = 'A login mismatch has occurred. Please <A href=>try again</a> or contact a staff member for assistance.';
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 3) {
    $login_ok = rc_session_variable_get('rc-res','login_ok');
    if( $login_ok == 0 ){
      form_set_error('', $checkboxErrorMsg3);
    }
    if (!empty($form_state['values']['op']) && $form_state['values']['op'] == 'Delete') {
      if (!empty($form_state['values'][0])) {
	$oneChecked = 0;
	for ($i=0; $i<=sizeof($form_state['values'][0]); $i++){ // note that the length may be greater than sizeof if rom 0 is disabled; loop 1 extra time; the !empty prevents problems if n+1 does not exist
	  if( isset($form_state['values'][0][$i]) ){ // use isset instead of !empty to see if an array element exitss
	    if( $form_state['values'][0][$i]>=1 || ($form_state['values'][0][$i] == '0' && is_string($form_state['values'][0][$i])) ){
    	      $oneChecked = 1;
	    }
	  }
	}
	if( $oneChecked != 1 ){
	  form_set_error('', $checkboxErrorMsg1);
	}
      } else {
	    form_set_error('', $checkboxErrorMsg2);
      }
    }
  } else if (!empty($form_state['page_num']) && $form_state['page_num'] == 4 && rc_session_variable_get('rc-res','noResources') == 0) {
    if (!$form_state['values']['date']) {
      form_set_error('date', 'Please enter a date and time.');
    }
  } else if (!empty($form_state['page_num']) && $form_state['page_num'] == 5 && $form_state['values']['op'] != 'Back') { // allow back even if missing values
    if (!$form_state['values']['table']) {
      form_set_error('date', 'Please choose a resource.');
    }
  } else if (!empty($form_state['page_num']) && $form_state['page_num'] == 6 && $form_state['values']['op'] != 'Back') { // allow back even if missing values
    if (!$form_state['values']['user_email']) {
      form_set_error('user_email', 'Please enter an email address.');
    }
    if ($form_state['values']['pnumber'] == 0) {
      form_set_error('pnumber', 'Please choose the number of persons in your group.');
    }
    if ($form_state['values']['res_length'] == 0) {
      form_set_error('res_length', 'Please enter the duration of your reservation.');
    }
//    if (!$form_state['values']['user_dept']) {
//      form_set_error('user_dept', 'Please enter the Department or Major associated with this request.');
//    }

  }
}
/**********************************************************************************************************/
/*** END Master validation function for the RC-Res form ***************************************************/
/**********************************************************************************************************/



/***********************************************************************************/
/***********************************************************************************/
/*** Research Commons Reservation Module *******************************************/
/***********************************************************************************/
/**
 * Implements hook_menu()..
 * Implements hook_menu().
 * Implements hook_menu().
 *
 * Set up calls to drupal_get_form() for all our example cases.
 */
function rc_res_menu() {

////  global $rc_res_get_user_category;
  $items = array();
  $items['libraries/researchlibrary/research-commons-reservation'] = array(
    'title' => 'Research Commons Reservations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rc_res_form_page_one'),
    'access callback' => TRUE,
    'menu_name' => 'navigation',
  );
  $items['reservations/yrl'] = array(
    'title' => 'Research Commons Reservations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rc_res_form_page_one'),
    'access callback' => TRUE,
    'menu_name' => 'navigation',
  );
  $items['reservations/yrl-logout'] = array(
    'title' => 'Research Commons Reservations Logout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yrl_logout_handler_submit'),
    'access callback' => TRUE,
    'menu_name' => 'navigation',
  );
  return $items;
}

/**
 * Create a form to add an entry, ......................................................................................................................
 * Create a form to add an entry, ......................................................................................................................
 * Create a form to add an entry, ......................................................................................................................
 */


/**
* page 1 - Welcome ......................................................................................................................
* page 1 - Welcome ......................................................................................................................
* page 1 - Welcome ......................................................................................................................
 */
function rc_res_form_page_one($form, &$form_state) {





  $GLOBALS['conf']['cache'] = FALSE; // keep pages out of cache for Shibboleth to work
  global $user;
  $rc_user = user_load($user->uid, $reset = TRUE);
  rc_session_variable_set('rc-res','rc_user',$rc_user);
  rc_session_variable_set('rc-res','outOfRange', 0); // this is used in page 4 and set in the page 4 handler

  $ucla_locale = "yrl"; //"powell"
  session_variable_set('powell-res','ucla_locale',$ucla_locale);

  // web services development server
//  $dev_host_resource_base = 'http://webservices-dev.library.ucla.edu'; // normally use https (this line) but https is not currently working (20130401, 20130514, )

  // web site base
  $host_www_base = 'http://www.library.ucla.edu/reservations/yrl';
  rc_session_variable_set('rc-res','host_www_base',$host_www_base);

  // web services production server
  $dev_host_resource_base = 'https://webservices.library.ucla.edu'; // normally use https (this line) but https is not currently working (20130401, 20130514, )
  rc_session_variable_set('rc-res','dev_host_resource_base',$dev_host_resource_base);

  // set this below when no resources are available for the user specified time; use it in the form validation above
  rc_session_variable_set('rc-res','noResources', 0);


// debug print for wrong user at top of page. save until we are sure the wrong user problem is solved
//print_r($user->uid);
//if ( !empty($_SERVER['SHIBUCLAUNIVERSITYID']) ) {
//  print_r(': >>>'.$_SERVER['SHIBUCLAUNIVERSITYID'].'<<<');
//} else{
//  print_r(': >>>EMPTY $_SERVER[SHIBUCLAUNIVERSITYID]<<<');
//}
//krumo($_SERVER);


  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary

  // Display page 2 if $form_state['page_num'] == 2
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
    //print_r('page_2');
    return rc_res_form_page_two($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 3) {
    //print_r('page_3');
    return rc_res_form_page_three($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 4) {
    //print_r('page_4a');
    return rc_res_form_page_four($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 5) {
    //print_r('page_5');
    return rc_res_form_page_five($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 6) {
    //print_r('page_6');
    return rc_res_form_page_six($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 7) {
    //print_r('page_7');
    return rc_res_form_page_seven($form, $form_state);
  }

  // Otherwise we build page 1.
  // Otherwise we build page 1.
  // Otherwise we build page 1.

  rc_session_variable_set('rc-res','no_res_available',0);
  rc_session_variable_set('rc-res','reservation_was_deleted', 0); // this is used in page 3 and set in the page 3 delete handler

  //retrieve user first and last name from the $user->field_user_full_name that was set on Shibboleth login
  if (!empty($rc_user->field_user_full_name['und'][0]['value'])){
    if (preg_match("/\|\|\|/", $rc_user->field_user_full_name['und'][0]['value'])) {
      $names = explode("|||", $rc_user->field_user_full_name['und'][0]['value']);
      rc_session_variable_set('rc-res','name_first', $names[0]);
      rc_session_variable_set('rc-res','name_last', $names[1]);
    }else{
      $names = explode(", ", $rc_user->field_user_full_name['und'][0]['value']);
      rc_session_variable_set('rc-res','name_last', $names[0]);
      rc_session_variable_set('rc-res','name_first', $names[1]);
    }
  }else{
    $names = explode("|||", "Name|||unavailable");
    rc_session_variable_set('rc-res','name_first', $names[0]);
    rc_session_variable_set('rc-res','name_last', $names[1]);
  }

  // build form for page
  //  $form_state['page_num'] = 1;
  $form = array();

  $form['description'] = array(
    '#type'  => 'item',
    '#no-cache'  => TRUE,
    '#title' => t('Welcome '.ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>UCLA students, faculty and staff may reserve group study spaces for groups of two or more people. UCLA Bruincard must be presented in order to claim a reservation.<br>
'),
  );

//  Save this, it is usefull when testing
//  $form['test'] = array(
//    '#type'  => 'checkboxes',
//    '#options' => drupal_map_assoc(  array( t('Test - checking this checkbox allows deletion of an expired reservation before 24 hours has passed') )  ),
//  );

  $form['next'] = array(
    '#type'  => 'submit',
    '#value' => t('Start'),
    '#submit' => array('rc_res_form_page_one_handler_submit'),
  );
  return $form;
}


/**
 * page 2 - Reservation Type ......................................................................................................................
 * page 2 - Reservation Type ......................................................................................................................
 * page 2 - Reservation Type ......................................................................................................................
 */
function rc_res_form_page_two($form, &$form_state) {
  // Build page 2.
  // Build page 2.
  // Build page 2.

  $form = array();

  $form['reservation_type'] = array(
    '#type' => 'radios',
    '#options' => array(
      'studyroom_or_pod'   => t('Reserve a Group Study Room or Collaboration Pod.'),
      'classroom_or_alcove_or_multi' => t('Reserve a Classroom or Alcove, or reserve multiple spaces at the same time.'),
    ),
    '#title' => t('Start your Reservation'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Next'),
    '#submit' => array('rc_res_form_page_two_handler_submit'),
  );
  return $form;
}


/**
 * page 3 - Your Reservations ......................................................................................................................
 * page 3 - Your Reservations ......................................................................................................................
 * page 3 - Your Reservations ......................................................................................................................
 */
function rc_res_form_page_three($form, &$form_state) {
  $GLOBALS['conf']['cache']=FALSE;
  global $user;
  rc_session_variable_set('rc-res','firstAccess4', 0);
  rc_session_variable_set('rc-res','rc_res_get_user_category', 'undergraduate'); // default

  // save for debugging shibboleth
  //drupal_set_message(t("User category: " . rc_session_variable_get('rc-res','rc_res_get_user_category') ));
  //drupal_set_message(t("User ID: " . rc_session_variable_get('rc-res','working_uid') ));

  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary

  // Improvement needed: improve this to work on a shibboleth system with a matching user. ie both shib user and drupal user, possibly with same username
  // retrieve the UCLA UID (not drupal uid)

  $login_ok = 0;
  if ( !empty($_SERVER['SHIBUCLAUNIVERSITYID']) ) {
    $working_uid = $_SERVER['SHIBUCLAUNIVERSITYID'];
    //print_r($_SERVER['SHIBUCLAUNIVERSITYID']);
    $login_ok = 1;
//  } else if ( !empty($_SERVER['HTTP_HOST']) ) { //dhc: temporary to allow operation on non-shib workstation // comment ou this section before putting onto DrupalTest and/or Production
//    if ( $_SERVER['HTTP_HOST']=='localhost' ) {
//      $working_uid = '502673598';
//      //print_r($_SERVER['HTTP_HOST']);
//      //print_r($working_uid);
//      $login_ok = 1;
//    }
  } else {
	// login failed, pick up in validation routine
      $working_uid = '';
      $login_ok = 0;
      //print_r($_SERVER['HTTP_HOST']);
      //print_r('working_uid');
      //print_r('Unable to login.');
  }

//  if ( $user->name == "darrowco" ) {
//     $working_uid = '502673598'; // insert darrowco's uid if drupal user darrowco is running this code on a non-shibboleth workstation
//   }else{
//     $working_uid = $user->name;
//   }

if ( !empty( $working_uid )) {
  rc_session_variable_set('rc-res','working_uid', $working_uid);
  // get user category here
  $rc_res_get_user_category = rc_res_get_user_category($working_uid);
  //print_r($rc_res_get_user_category);
  rc_session_variable_set('rc-res','rc_res_get_user_category', $rc_res_get_user_category);
} else {
  $rc_res_get_user_category = '';
  rc_session_variable_set('rc-res','rc_res_get_user_category', '');
  $login_ok = 0;
}

  // TEMP FOR TESTING
  // rc_session_variable_set('rc-res','rc_res_get_user_category', 'undergraduate');
  // rc_session_variable_set('rc-res','rc_res_get_user_category', 'graduate');
  // rc_session_variable_set('rc-res','rc_res_get_user_category', 'staff');
  //$rc_res_get_user_category = 'extension';
  //rc_session_variable_set('rc-res','rc_res_get_user_category', 'extension');
  //print_r($rc_res_get_user_category);
  // END TEMP FOR TESTING

  // translate Voyager terms to match local terms
  if( preg_match("/undergraduate/i", $rc_res_get_user_category) ) {
    $rc_res_get_user_category = 'Undergraduate';
  } else if( preg_match("/graduate/i", $rc_res_get_user_category) ) {
    $rc_res_get_user_category = 'Graduate';
  } else if( preg_match("/staff/i", $rc_res_get_user_category) ) {
    $rc_res_get_user_category = 'UCLA Staff';
  } else if( preg_match("/faculty/i", $rc_res_get_user_category) ) {
    $rc_res_get_user_category = 'UCLA Staff';
  } else if( preg_match("/academic/i", $rc_res_get_user_category) ) {
    $rc_res_get_user_category = 'UCLA Staff';
  } else {
  $rc_res_get_user_category = '';
  rc_session_variable_set('rc-res','rc_res_get_user_category', '');
  $login_ok = 0;
  }
  rc_session_variable_set('rc-res','rc_res_get_user_category', $rc_res_get_user_category);
  rc_session_variable_set('rc-res','login_ok', $login_ok); // use this to trigger error message after form submission

  // get category rules here
  $rc_res_get_user_rules = rc_res_get_user_rules($rc_res_get_user_category);
  rc_session_variable_set('rc-res','rc_res_get_user_rules', $rc_res_get_user_rules);

  // retrieve the policy rules previously saved in the rules table
  $my_kvar = rc_session_variable_get('rc-res','rc_res_get_user_rules');

  // get the number of items the current category of user is allowed to reserve into the future - typically either 1 or 3
  $my_advance = $my_kvar[0]['cls_adv'];
  $my_resv_lim = $my_kvar[0]['time_per'];
  $my_fresv_max = $my_resv_lim;
  // convert hours to days
  $my_advance_days = $my_advance/24;
  $my_advance_seconds = $my_advance*3600;

  // build string for setting the date for the earliest time that a new reservation may be made
  $earliest_new_reservation_inc = ' +'.$my_advance_days.' day';

//  $my_fresv_max = $my_advance/$my_resv_lim;

  // get the current date/time of the DrupalTest server
  $nowDate = strtotime("now");
  $earliest_new_reservation = strtotime("now".$earliest_new_reservation_inc); //dhc_change move this to just before needing it so that it is set at the time the user clicks on a button dhcdhcdhc
  $startDatePast = array();
  $startDateFuture = array();
  $startDateLatest = array();

  // read any reservations given a UID
  $rows = array();
  if ( !empty( $working_uid )) {
    $rows = rc_res_get_user_reservations($working_uid);
  } else {
    $rows = '';
  }

  // set header for the form
  $header = array
  (
    'title' => t('Name'),
    'startDate' => t('Start'),
    'endDate' => t('End'),
  );

  // Initialize an empty array for the row(s) of reservations just returned from the Resource Scheduler db
  $options = array();
 
  // Use this in the tableselect to set the initial values for the radio buttons
  $values = array();
  $lcnt = 0;
  $startDateFutureCnt = 0;
  $startDatePastCnt = 0;

  // check to verify that at least on row was obtained
  $deleteFlag = 0;
  $waitFlag = 0;
  $waitFlagOnly = 0;

  // Set defaults to enable the form displayed to the user
  $myRow = 1;
  $myDelete = 1;
  $myNext = 1;
  $myMax = 0;
  $myMaxFuture = 0;
  $myMaxPast = 0;

  // if at least one row was returned, loop through each row  
  // if at least one row was returned, loop through each row  
  // if at least one row was returned, loop through each row  
  if (!empty($rows['reservation'])) {
    foreach($rows['reservation'] as $row) {
      // each element of the array is keyed with the lcnt
      $options[$lcnt]['title'] = $row['title'];
      $options[$lcnt]['roomName'] = $row['roomName']; // longer more detailed description

      // dhc; complete date is needed for the zones calc to work (around line 800-900)
      $rowStartDate = date('D\, g:ia n/j/Y',strtotime($row['startDate'])); // format date
      $options[$lcnt]['startDate'] = $rowStartDate;
      $rowEndDate = date('D\, g:ia n/j/Y',strtotime($row['endDate'])); // format date
      $options[$lcnt]['endDate'] = $rowEndDate;
      $options[$lcnt]['schedID'] = $row['schedID'];
      // set the initial vals for the radio buttons
      $values[$lcnt] = 0;
      // keep count of number of rows
      $lcnt += 1;

      // save any expired reservation; only one should exist and it should be within the last 24 hours (detection of expired reservation and period in which to detect is set in the web services call)
      $curRowDate = strtotime($row['startDate']);

  // dhc - temp if temp checkbox on first page is checked, disregard rules
  if (empty($form_state['input']['test']['Test - checking this checkbox allows deletion of an expired reservation before 24 hours has passed'])){

	///// START: business rule processing
	///// START: business rule processing
	///// START: business rule processing
	if( $curRowDate > $nowDate){
	  $startDateFuture = $curRowDate;
	  $startDateFutureCnt += 1;
	  if( $startDatePastCnt > 0 ){
	    if( $my_resv_lim == 1 ){
	      if( $startDatePastCnt > 1 ){
		print_r('ERROR - call Darrow Cole at Library IT 310-206-5565');
	      } else {
//		$myRow = 1;
		$myDelete = 1;
		$myNext = 0;
		$myMaxFuture = 1;
		$earliest_new_reservation_lim1 = $curRowDate;
	      }
	    } else if( $lcnt < $my_resv_lim ){
	      $myRow = 0; // note: build $myRow[] array if the rules change so that more than one item can be in the expired list
	      $myDelete = 1;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	      $myMax = 1;
	    }
	  } else {
	    if( $my_resv_lim == 1 ){
	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	      $myMaxFuture = 1;
	      $earliest_new_reservation_lim1 = $curRowDate;
//	      $earliest_new_reservation_lim1 = $curRowDate + $my_advance_seconds;
	    } else if( $lcnt < $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	      $myMax = 1;
	    }
	  }
	} else if( $curRowDate <= $nowDate){
	  $startDatePast = $curRowDate;
	  $startDatePastCnt += 1;
	  if( $startDateFutureCnt > 0 ){
	    if( $my_resv_lim == 1 ){
		print_r('ERROR - call Darrow Cole at Library IT 310-206-5565');
	    } else if( $lcnt < $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	    }
	  } else {
	    if( $my_resv_lim == 1 ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 1;
	      $myMax = 0;
	      $earliest_new_reservation_lim1 = $nowDate + $my_advance_seconds;
	    } else if( $lcnt < $my_resv_lim ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 0;
	      $myMax = 1;
	    }
	  }
	}
	// END: business rules processing
	// END: business rules processing
	// END: business rules processing
      }
  //dhc - END: development checkbox
    }
  }
  // END: if at least one row was returned, loop through each row  
  // END: if at least one row was returned, loop through each row  
  // END: if at least one row was returned, loop through each row  

  // save data for any current reservations
  rc_session_variable_set('rc-res','options', $options);

  $earliest_new_reservationDisplay = date('g:ia \o\n l jS F Y', $earliest_new_reservation); // now +24 hours in seconds
  rc_session_variable_set('rc-res','earliest_new_reservation', $earliest_new_reservation);  // used on page 4

  // used to prevent rendering of the delete button if there are no existing reservations
  if(!$options){
    $sub_delete = FALSE;
  } else {
    $sub_delete = TRUE;
  }

  rc_session_variable_set('rc-res','lcnt', $lcnt);
// Improvement needed: cannot seem to pass a hidden variable to the delete handler?? use global for now
//  // save number of items on reserve to use later in delete handler; see bug http://qa.drupal.org/pifr/test/281743
//  $form['myHidden']['lcnt'] = array(
//    '#type' => 'hidden',
//    '#value' => $lcnt,
//  );

  // this builds the rows with checkboxes
  $form['myselector12'] = array
  (
    '#type' => 'tableselect',
    '#title' => 'My Selector12',
    '#id' => 'form_p312',
    '#header' => $header,
    '#options' => $options,
    '#default_value' => $values,
//    '#values' => $values,
    '#empty' => t('<center>No existing reservations</center>'),
  );

  // this disables row(s)
  // if the business rules indicate that the user is not allowed to make a new reservation, or delete an old reservation, at this time, remove the option to delete any old reservations
  if( $myRow == 0 ){
    $form['myselector12'][0]['#disabled'] = true; // disable the row
    $form['submit'] = array(); // remove delete button array to prevent display of the delete button
  }

  $reservation_was_deleted = rc_session_variable_get('rc-res','reservation_was_deleted'); // this is used in page 3 and set in the page 3 delete handler
  if( $reservation_was_deleted == 1 ){
    $form['description4'] = array
    (
      '#type'  => 'item',
      '#markup' => t('<font color=red>Reservation(s) deleted</font>'),
    );
  rc_session_variable_set('rc-res','reservation_was_deleted', 0); // this prevents the error message from being sticky
  } else {
    $form['description4'] = array();
  }

  if( $myDelete == 1 ){
    // create delete button to delete existing reservation(s) from Resource Scheduler by calling a web service from the handler
    $form['submit'] = array
    (
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('rc_res_form_page_three_delete_handler_submit'),
      '#access' => $sub_delete,
    );
  }
  
  // build the main part of the form
  $form_p3_main = array();

  // Improvement needed: what is a better way to dothis??? Repeating most of an array for just a text difference seems wasteful
  if( $rc_res_get_user_category == 'Undergraduate'){
  $form_p3_main = array(

    // breadcrumbs (hardcoded for now)
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;
( <a href="yrl-logout">logout</a> )
<br>
<B>Your Reservations</B> > Date & Time > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;
<br><br>
<b>Reservation Policies</b><br>
<br>
<b>Undergraduate Student and Staff Reservations
<ul>
<li>up to two hours long
<li>up to twenty-four hours in advance
<li>all reservation start times must be at least twenty-four hours apart
</ul></b>
Graduate Student, Faculty, and Library Staff Reservations
<ul>
<li>up to four hours long
<li>up to one week in advance
<li>all reservation start times must be at least twenty-four hours apart
<li>users who require exceptions may contact yrlrc@library.ucla.edu
</ul>
'),
    ),

    // main array
    $form['myselector12'],
    $form['description4'],
    $form['submit'],
  );
  } else {
  $form_p3_main = array(

    // breadcrumbs (hardcoded for now)
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
<B>Your Reservations</B> > Date & Time > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;
<br><br>
<b>Reservation Policies</b><br>
<br>
<b>Graduate Student, Faculty, and Library Staff Reservations
<ul>
<li>up to four hours long
<li>up to one week in advance
<li>all reservation start times must be at least twenty-four hours apart
<li>users who require exceptions may contact yrlrc@library.ucla.edu
</ul></b>
Undergraduate Student and Staff Reservations
<ul>
<li>up to two hours long
<li>up to twenty-four hours in advance
<li>all reservation start times must be at least twenty-four hours apart
</ul>
'),
    ),

    // main array
    $form['myselector12'],
    $form['description4'],
    $form['submit'],
  );
  }

  // check for maxed out reservations, add a "reservations are at a max" message to the form if necessary
  if (!empty($options)){
    $earliest_new_reservation_lim_gt_1 = strtotime($options[0]['startDate'])+24*3600;
  }

  $form_p3_maxed = array();
  if( ($myMax==1) && ($my_resv_lim>1) ){
    $form_p3_maxed = array(
      $form['description'] = array
      (
	'#type'  => 'item',
	'#title' => t('Only '.$my_resv_lim.' Reservation(s) allowed per '.$my_advance_days.' days - To make a new reservation please first delete an existing reservation or try again after '.date('g:ia \o\n l jS F Y',$earliest_new_reservation_lim_gt_1)),
      ),
    );
  }else  if( ($myMaxFuture==1) && ($my_resv_lim==1) ){ // NOTE: this is currently hardcoded for the undergraduate case, it needs to be expanded to handle all cases; fixed now?
    $form_p3_maxed = array(
      $form['description'] = array
      (
	'#type'  => 'item',
	'#title' => t('Only '.$my_resv_lim.' Reservation(s) allowed per 24 hours - You may create a new reservation on or after '.date('g:ia \o\n l jS F Y',$earliest_new_reservation_lim1)),
      ),
    );
  }

  // add the submit button, disable if reservations are at a max
  $form_p3_submit = array();

    // disable the submit button if this test is true
    if( $myNext == 0 ){
      $form_p3_submit = array(
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create a new reservation'),
	  '#submit' => array('rc_res_form_page_three_handler_submit'),
	  '#disabled' => TRUE,
	),
      );
    } else if( sizeof($options)>0 && $myDelete==1 ) {
      $form_p3_submit = array(
	$form['description'] = array(
	  '#type'  => 'item',
	  '#title' => t('&nbsp;&nbsp;or'),
	),
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create a new reservation'),
	  '#submit' => array('rc_res_form_page_three_handler_submit'),
	  '#disabled' => FALSE,
	),
      );
    } else if( sizeof($options)>0 && $myDelete==0 ) {
      $form_p3_submit = array(
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create a new reservation'),
	  '#submit' => array('rc_res_form_page_three_handler_submit'),
	  '#disabled' => FALSE,
	),
      );
    }else{
      $form_p3_submit = array(
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create a new reservation'),
	  '#submit' => array('rc_res_form_page_three_handler_submit'),
	  '#disabled' => FALSE,
	),
      );
    }

  // assemble the various form arrays into one array
  $form_p3 = array();
  $form_p3 = $form_p3_main;
  $form_p3[] = $form_p3_maxed;
  $form_p3[] = $form_p3_submit;
//  $form_p3[] = $form;

  // assemble the above arrays
  $page_array = array();
  foreach ($form_p3 as $key => $item) {
    $page_array[$key]['#description'] = $key;
//    $page_array[$key]['hr'] = array('#markup' => '<hr/>');
    $page_array[$key]['rendered'] = array($item);
  }
  //  return $page_array;
  return $page_array;
}

/**
 * page 4 - Date & Time ......................................................................................................................
 * page 4 - Date & Time ......................................................................................................................
 * page 4 - Date & Time ......................................................................................................................
 */
function rc_res_form_page_four($form, &$form_state) {
  $GLOBALS['conf']['cache']=FALSE;
  $no_res_available = rc_session_variable_get('rc-res','no_res_available');
  $my_kvar = rc_session_variable_get('rc-res','rc_res_get_user_rules');

  // get the number of items the current category of user is allowed to reserve into the future - typically either 1 or 3
  $my_resv_lim = $my_kvar[0]['time_per'];

  if (!empty($form_state['page_values'][4])) {
    $form_state['values'] = $form_state['page_values'][4];
    $default_date_time = $form_state['values']['date'];
  } else {
    $default_date_time = date("Y-m-d H:i:s", $_SERVER['REQUEST_TIME']);
    $default_date_time_min = date("i", $_SERVER['REQUEST_TIME']);
    $default_date_time_min = (int)$default_date_time_min;
    if($default_date_time_min <= 15 ){
      $default_date_time_min = 29; // 1 minute less to allow reservation at a particular time
      $string = $default_date_time;
      $pattern = '/:\d\d:/';
      $replacement = ':'.$default_date_time_min.':';
      $default_date_time = preg_replace($pattern, $replacement, $string);
    } else if($default_date_time_min >= 30 && $default_date_time_min <= 45){
      $default_date_time_min = 59; // 1 minute less to allow reservation at a particular time
      $string = $default_date_time;
      $pattern = '/:\d\d:/';
      $replacement = ':'.$default_date_time_min.':';
      $default_date_time = preg_replace($pattern, $replacement, $string);
    }
  }

  $form = array();
  $userDate = rc_session_variable_get('rc-res','userDate');
  $userDateTime = $userDate;
  $earliest_new_reservation = rc_session_variable_get('rc-res','earliest_new_reservation');

  // round up to the nearest 1/2/hour
  if ( !empty($earliest_new_reservation) ) {
    // round the zone times up to the next 1/2 hour
    $mod_minute = $earliest_new_reservation % 3600;
    if( $mod_minute < 1800 ){
      $earliest_new_reservation = $earliest_new_reservation - $mod_minute + 1800;
    } else {
      $earliest_new_reservation = $earliest_new_reservation - $mod_minute + 3600;
    }
  }

  // convert to old style to work under php 5.2.x that is running on the Production servers
  $old_date_timestamp = strtotime($earliest_new_reservation);
  $earliest_new_reservation_time = date('g:ia', $earliest_new_reservation);
  $earliest_new_reservation_time_date = date('g:ia \o\n l jS F Y', $earliest_new_reservation);

  $nowDate = strtotime("now");
  $maxDate = strtotime("now");
  $nowDateDisplay = date('g:ia \o\n l jS F Y', $nowDate);

  $earliest_new_reservationDisplay = date('g:ia \o\n l jS F Y', $earliest_new_reservation);

  // dhc here: check undergrad pulling $my_resv_lim from business rules

  // UNDERGRAD SECTION
  if ( $my_resv_lim == 1 ){
    $maxDate = strtotime("now".' +1 day');

    $zone[0] = strtotime("now");
    $zone[1] = strtotime("now".' +1 day');
    rc_session_variable_set('rc-res','zone',$zone);

  if( $userDateTime > $earliest_new_reservation){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
<br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
<b>Please choose a start time within the next 24 hours</b><br>
(before ').$earliest_new_reservation_time_date.')'
    );
  }else if( $userDateTime < $nowDate){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
<br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
<b>Please choose a start time within the next 24 hours</b><br>
(between now and ').$earliest_new_reservation_time_date.')'
    );
  }else{
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
<br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      <BR>
		      Start your reservation within the next 24 hours<BR>
		      <BR>
		      <b>Start before ').$earliest_new_reservation_time.' tomorrow</b> ('.$earliest_new_reservation_time_date.')'
    );
  }

  // GRADUATE, STAFF SECTION
  } else {
//  } else if ( $my_resv_lim > 1 ){

  // calculate legal reservation zones based on any existing reservations in the n-24 to n+168 interval
  $nm1 = 0;
  $zcnt = 0;
  $existing_resv = rc_session_variable_get('rc-res','lcnt');
  $options = rc_session_variable_get('rc-res','options');

  // if no reservation exists
  if( $existing_resv == 0 ){
    $zone[0] = strtotime("now");
    $zone[1] = strtotime("now".' +'.$my_resv_lim.' day');
    $maxDate = $zone[1];

  // else if one or more than one reservation exists and they are in the past and future OR just in the future
  } else {
    // calculate zones time within which a reservation can be made
    $j=-1; // set starting point for zones array // oops, this should start at 3 if one existing resv, 5 if two existing resv, 7 if three existing resv, etc. This number equals (2*$existing_resv)+1 so use that value
    //$i = (2*$existing_resv)+1; // value is incremented before first use so drop the +1
    //$i = (2*$existing_resv);

    if ( strtotime("now") <= (strtotime($options[0]['startDate'])-(24*3600)) ){
      $zone[$j+=1] = strtotime("now");
      $zone[$j+=1] = strtotime($options[0]['startDate'])-(24*3600);
    }
    for ($i=0; $i+1<$existing_resv; $i++){
      if( (strtotime($options[$i+1]['startDate'])-(24*3600)) >= (strtotime($options[$i]['startDate'])+(24*3600))) {
	if( strtotime("now") <= (strtotime($options[$i]['startDate'])+(24*3600))) {
	  $zone[$j+=1] = strtotime($options[$i]['startDate'])+(24*3600);
	  $zone[$j+=1] = strtotime($options[$i+1]['startDate'])-(24*3600);
	}
	else if( strtotime("now") <= (strtotime($options[$i+1]['startDate'])-(24*3600))) {
	  $zone[$j+=1] = strtotime("now");
	  $zone[$j+=1] = strtotime($options[$i+1]['startDate'])-(24*3600);
	}
      }
    }
    if( (strtotime($options[$i]['startDate'])+(24*3600)) <= (strtotime("now".' +'.$my_resv_lim.' day')) ) {
      if ( strtotime("now") <= (strtotime($options[$i]['startDate'])+(24*3600)) ){
	$zone[$j+=1] = strtotime($options[$i]['startDate'])+(24*3600);
	$zone[$j+=1] = strtotime("now".' +'.$my_resv_lim.' day');
      }
      else if( (strtotime("now")) <= (strtotime("now".' +'.$my_resv_lim.' day')) ) {
	$zone[$j+=1] = strtotime("now");
	$zone[$j+=1] = strtotime("now".' +'.$my_resv_lim.' day');
      }
    }
    // END - calculate zones time within which a reservation can be made  
  }

  // save the zones for use in the handler
  rc_session_variable_set('rc-res','zone',$zone);

  // print out ranges for the user
  $zonePoints = sizeof( $zone );

  $i = 0;
  $zoneRange = '';
  while ($i < $zonePoints) {
    if ( !empty($zone[$i]) ) {
      // round the zone times up to the next 1/2 hour
      $mod_minute = $zone[$i] % 3600;
      if( $mod_minute < 1800 && $mod_minute > 0 ){
	$zone[$i] = $zone[$i] - $mod_minute + 1800;
      } else if( $mod_minute < 3600 && $mod_minute >= 1800 ) {
	$zone[$i] = $zone[$i] - $mod_minute + 3600;
      }

      $mod_minute = $zone[$i+1] % 3600;
      if( $mod_minute < 1800 && $mod_minute > 0 ){
	$zone[$i+1] = $zone[$i+1] - $mod_minute + 1800;
      } else if( $mod_minute < 3600 && $mod_minute >= 1800 ) {
	$zone[$i+1] = $zone[$i+1] - $mod_minute + 3600;
      }

      $zoneRangeNew = date('l\, n\/j g:i A', $zone[$i]).' --- '.date('l\, n\/j  g:i A', $zone[$i+1]).'<br>';
    }
//    $zoneRangeNew = date('g:ia D m/d/y', $zone[$i]).' --- '.date('g:ia D m/d/y', $zone[$i+1]).'<br>';
    $zoneRange = $zoneRange.$zoneRangeNew;
    $i+=2;
  }

  $firstAccess4 = rc_session_variable_get('rc-res','firstAccess4');
  $no_res_available = rc_session_variable_get('rc-res','no_res_available');
  $outOfRange = rc_session_variable_get('rc-res','outOfRange'); // this is used in page 4 and set in the page 4 handler

  if( $no_res_available == 1 ){
    rc_session_variable_set('rc-res','no_res_available',0);

form_set_error('', 'There are no reservations available at the time you chose, please choose a different start time.<br>
Also, please make the reservation during hours of operation. See <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a>.');

    $zones = ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      <br>
		      Start date/time must fall within this range:<br>
		      <b>'
		      .$zoneRange.'</b>
		      <br>and occur during building hours: <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a><br>
		      <br><br>
		      <b>Enter start date/time:</b>';
  } else if( $outOfRange == 1 ) {
    rc_session_variable_set('rc-res','no_res_available',0);

form_set_error('', 'Please choose a start time in one of the following time slot(s)<br>(reservations can be no more than '.$my_resv_lim.' day(s) into the future and must be at least 24 hours from any existing reservations.)<br>
Also, please make the reservation during hours of operation. See <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a>.');

    $zones = ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      <br>
		      Start date/time must fall within this range:<br>
		      <b>'
		      .$zoneRange.'</b>
		      <br>and occur during building hours: <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a><br>
		      <br><br>
		      <b>Enter start date/time:</b>';
  } else if( $firstAccess4 == 0 ) {
    $zones = ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      <br>
		      Start date/time must fall within this range:<br>
		      <b>'
		      .$zoneRange.'</b>
		      <br>and occur during building hours:<br>
		      <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a><br>
		      <br><br>
		      <b>Enter start date/time:</b>';
rc_session_variable_set('rc-res','firstAccess4', 1);
  } else if( $firstAccess4 > 0 ) {

form_set_error('', 'Please choose a start time in one of the following time slot(s)<br>(reservations can be no more than '.$my_resv_lim.' day(s) into the future and must be at least 24 hours from any existing reservations.)<br>
Also, please make the reservation during hours of operation. See <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a>.)');

    $zones = ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      <br>
		      Start date/time must fall within this range:<br>
		      <b>'
		      .$zoneRange.'</b>
		      <br>and occur during building hours: <a href="http://www.library.ucla.edu/about/research-library-hours" target="_new">YRL hours</a><br>
		      <br><br>
		      <b>Enter start date/time:</b>';
  }

  if (!empty($zoneRange)) {
//  if( $userDateTime > $earliest_new_reservation){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t($zones)
    );
  }else if( $userDateTime < $nowDate){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      <b>Please choose a start time within the next 24 hours</b><br>
		      (between now and ').$earliest_new_reservation_time_date.')'
    );
  }else{
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > <b>Date & Time</b> > Available Resources > Details > Finish &nbsp;&nbsp;&nbsp;<br>
		      Start your reservation within the next 24 hours<BR>
		      <BR>
		      <b>Start before ').$earliest_new_reservation_time.' tomorrow</b> ('.$earliest_new_reservation_time_date.')'
    );
  }
  } // else if ( $my_resv_lim > 1 )

  rc_session_variable_set('rc-res','maxDate', $maxDate);

  // set the time to appear in the dropdown menu: today's date and starting at midnight, e.g. $dropTime = '2013-03-26 00:00:00';
  $dropTime = date('Y-m-d', strtotime("now"));
  $dropTime = $dropTime.' 00:00:00';

  $form['date'] = array(
    '#type' => 'date_popup', // Provided by the date_popup module
    '#default_value' => $dropTime,
    '#date_format' => 'Y-m-d h:i A', // Uses the PHP date() format - http://php.net/manual/en/function.date.php
    '#date_year_range' => '0:+0.1', // Limits the year range to the next two upcoming years
    '#date_increment' => 30,
    '#required' => TRUE,
    '#date_label_position' => 'above',
  );


  $form['back3'] = array(
    '#type'  => 'submit',
    '#value' => t('Back'),
    '#submit' => array('rc_res_form_page_fourb_handler_submit'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Next'),
    '#submit' => array('rc_res_form_page_four_handler_submit'),
  );
  return $form;
} 

/**
 * page 5 - Available Resources ......................................................................................................................
 * page 5 - Available Resources ......................................................................................................................
 * page 5 - Available Resources ......................................................................................................................
 */
function rc_res_form_page_five($form, &$form_state) {
  if (!empty($form_state['page_values'][5])) {
    $form_state['values'] = $form_state['page_values'][5];
  }

  $form = array();

  // read reervations given an UID (currently simulated in drupal)
  $rows = array();
  $rows = rc_res_get_resources_for_period_complete($form, $form_state);
  $header = array
  (
    'title' => t('Name'),
//    'start' => t('Start'),
//    'end' => t('End'),
    'duration' => t('Max hours'),
    'capacity' => t('Capacity'),
    'description' => t('Additional Info'),
  );

  // Initialize an empty array
  $options = array();
  // Next, loop through the $users array
  $lcnt = 0;

  if ($rows != "Not Found" && $rows != NULL) {
  foreach($rows as $row)
    {
      $lcnt += 1;
      $o_index = $row['resources'][0]['id'].':::'.$row['start'].':::'.$row['end'].':::'.$row['resources'][0]['capacity'].':::'.$row['resources'][0]['title'].':::'.$row['resources'][0]['description'].':::'.$row['duration'];
      $o_key[$lcnt-1] = $o_index;
      $options[$o_index] = array // each element of the array is keyed with the PID
      (
//	'sorter' => $row['resources'][0]['title'], // 'start_time' was the key used in the header
	'title' => $row['resources'][0]['title'], // 'start_date' was the key used in the header
//	'start' => $row['start'], // 'start_date' was the key used in the header
//	'end' => $row['end'], // 'start_date' was the key used in the header
	'duration' => $row['duration'], // duration during which the resource is available
	'capacity' => $row['resources'][0]['capacity'], // 'start_time' was the key used in the header
	'description' => $row['resources'][0]['description'], // 'start_date' was the key used in the header
      );
    }
  }

  $demos0 = array();

  if ($rows != "Not Found" && $rows != NULL) {
    $dtimedate = $rows[0]['start']; // get start time from value(s) returned from the web service call
    $dtime = preg_match( '/\d\d\d\d/', $dtimedate, $tyear ); // extract the numerical year
    $dtime = preg_match( '/-\d\d-/', $dtimedate, $tmonth ); // extract the numerical month
    $dtime = preg_match( '/\d\d/', $tmonth[0], $tmonth );
    $dtime = preg_match( '/-\d\d /', $dtimedate, $tday ); // extract the numerical day
    $dtime = preg_match( '/\d\d/', $tday[0], $tday );
    $dtime = preg_match( '/\d\d:/', $dtimedate, $thour ); // extract the numerical hour
    $dtime = preg_match( '/\d\d/', $thour[0], $thour );
    $dtime = preg_match( '/:\d\d/', $dtimedate, $tminute ); // extract the numerical minute
    $dtime = preg_match( '/\d\d/', $tminute[0], $tminute );
    $dtime = preg_match( '/.M/', $dtimedate, $apm ); // extract AM or PM
    // Convert to 24hr time for the date()
    $apms = strtolower($apm[0]);
    if( $apms == 'pm'){
      $thour[0] = $thour[0] + 12;
    }
  
    $ddyear = date("Y", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of year. "Y" yields 2012
    $ddmonth = date("M", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of month. "M" yields Jan through Dec
    $ddmonth2 = date("F", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of month. "M" yields Jan through Dec
    $ddday = date("jS", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of day. "j" yields 1 through 31 with no leading 0
    $dddow = date("l", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of Day of Week. "D" Monday through Sunday
    $ddhourmin = date("g:ia", mktime($thour[0], $tminute[0], 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of Day of Week. "D" Monday through Sunday
    $ddtime = preg_replace( '/\d\d\d\d-\d\d-\d\d/', '', $dtimedate );  // extract start time from value(s) returned from the web service call

    // display back time chosen by user
    $available_resources = $ddhourmin.t(' on '.$dddow.', '.$ddmonth2.' '.$ddday);
    // save for use on subsequent pages
    rc_session_variable_set('rc-res','available_resources', $available_resources);

  $demos0 = array(

    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > Date & Time > <B>Available Resources</B> > Details > Finish &nbsp;&nbsp;&nbsp;'),
    ),

    $form['description2'] = array
    (
      '#type'  => 'item',
      '#title' => t('Available Resources at ').$available_resources,
    ),

    $form['table'] = array
    (
      '#id' => 'formformform2',
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#multiple' => FALSE,
      '#empty' => t('<center>No available resources found</center>'),
      '#default_value' => isset($form_state['values']['table']) ? $form_state['values']['table'] : NULL,
    ),

    $form['back4'] = array(
      '#type'  => 'submit',
      '#value' => t('Back'),
      '#submit' => array('rc_res_form_page_fiveb_handler_submit'),
    ),

    $form['submit'] = array
    (
      '#type' => 'submit',
      '#value' => t('Reserve selected resource'),
      '#submit' => array('rc_res_form_page_five_handler_submit'),
    ),
  );

  } else { // else there are no rows

  rc_session_variable_set('rc-res','noResources', 1);
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;

  $demos0 = array(
    $form['description'] = array
    (
      '#type'  => 'item',
      '#title' => t('Available Resources:'),
    ),

    $form['table'] = array
    (
      '#id' => 'formformform2',
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#multiple' => FALSE,
      '#empty' => t('<center>No available resources found</center>'),
    ),

    $form['submit2'] = array
    (
      '#type' => 'submit',
      '#value' => t('Change Date and Time'),
      '#submit' => array('rc_res_form_page_five_empty_handler_submit'),
    ),
  );
  }
  return $form;
}

/**
 * page 6 - Details ......................................................................................................................
 * page 6 - Details ......................................................................................................................
 * page 6 - Details ......................................................................................................................
 */
function rc_res_form_page_six($form, &$form_state) {
  if (!empty($form_state['page_values'][6])) {
    $form_state['values'] = $form_state['page_values'][6];
  }

  // retrieve selection details
  $delimiter = ':::';
  $string = $form_state['page_values'][5]['table'];
  $sub_array = explode ( $delimiter, $string );
  $rrid = $sub_array[0];
  $rstart = $sub_array[1];
  $rend_oem = $sub_array[2]; // use later to compare $rend with $rstart+$res_length???
  $rcapacity = $sub_array[3];
  $rtitle = $sub_array[4];
  $rdescription = $sub_array[5];
  $rhours_available = $sub_array[6];

  // Build the capacity numbers for the dropdown menu
  $roomCapacity = array();
  $roomCapacity[0] = 'Choose';
  $i = 2;
  while( $i <= $rcapacity){
    $roomCapacity[$i] = $i;
    $i++;
  }

  // build the hours available numbers for the dropdown menu based on max available and user category
  // retrieve user details
  $my_kvar = rc_session_variable_get('rc-res','rc_res_get_user_rules');

  // get the max reservation length allowed to the user
  $my_cls_lim = $my_kvar[0]['cls_lim']; // from the rules table for the group of which the user is a member (grad or undergrad)
  $my_gsr_lim = $my_kvar[0]['gsr_lim']; // from the rules table for the group of which the user is a member (grad or undergrad)
  $my_pod_lim = $my_kvar[0]['pod_lim']; // from the rules table for the group of which the user is a member (grad or undergrad)

  // convert limit from Resource Scheduler into minutes
  $rhours_available = $rhours_available * 60;

  if (preg_match("/Group/i", $rtitle)) {
  } else if (preg_match("/Classroom/i", $rtitle)) {
  } else  { // use pod if nothing else matches
    if( $my_pod_lim < $rhours_available ){
      $myLim = $my_pod_lim;
    } else {
      $myLim = $rhours_available;
    }
  }

  // Improvement needed: change this to an unlimited list using mod and ?
  if( $myLim >= 240 ){
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
    $resLength[120] = '2 hours';
    $resLength[150] = '2 1/2 hours';
    $resLength[180] = '3 hours';
    $resLength[210] = '3 1/2 hours';
    $resLength[240] = '4 hours';
  } else  if( $myLim >= 210 ) {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
    $resLength[120] = '2 hours';
    $resLength[150] = '2 1/2 hours';
    $resLength[180] = '3 hours';
    $resLength[210] = '3 1/2 hours';
  } else  if( $myLim >= 180 ) {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
    $resLength[120] = '2 hours';
    $resLength[150] = '2 1/2 hours';
    $resLength[180] = '3 hours';
  } else  if( $myLim >= 150 ) {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
    $resLength[120] = '2 hours';
    $resLength[150] = '2 1/2 hours';
  } else  if( $myLim >= 120 ) {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
    $resLength[120] = '2 hours';
  } else  if( $myLim >= 120 ) {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
    $resLength[120] = '2 hours';
  } else  if( $myLim >= 90 ) {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
    $resLength[90] = '1 1/2 hours';
  } else {
    $resLength[0] = 'Choose';
    $resLength[60] = '1 hours';
  }

  $form = array();
  $form['description'] = array
  (
    '#type'  => 'item',
    '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > Date & Time > Available Resources > <B>Details</B> > Finish &nbsp;&nbsp;&nbsp;'),
  );

  $available_resources = rc_session_variable_get('rc-res','available_resources');
  $form['description2'] = array
  (
    '#type'  => 'item',
    '#title' => t('Your selected Resource --- <em>'.rc_session_variable_get('rc-res','rtitle').'</em> --- will be reserved at ').$available_resources,
    '#markup' => t('<br>An email confirmation containing all details will be sent to you after you confirm this page.'),
  );

  $rc_user = rc_session_variable_get('rc-res','rc_user');  
  $my_email = $rc_user->mail;

  $form['user_email'] = array(
    '#type'  => 'textfield',
    '#title' => t('Email'),
    '#size'  => 45,
    '#default_value' => isset($my_email) ? $my_email : NULL,
  );

 $form['pnumber'] = array(
    '#title' => t('Group size'),
    '#type' => 'select',
    '#options' => $roomCapacity,
    '#default_value' => 'Choose',
  );

  $form['res_length'] = array(
    '#title' => t('Duration'),
    '#type' => 'select',
    '#options' => $resLength,
    '#default_value' => 'Choose',
  );

//  $form['user_dept'] = array(
//    '#type'  => 'textfield',
//    '#title' => t('Department / Major'),
//    '#size'  => 45,
//    '#default_value' => isset($form_state['values']['user_dept']) ? $form_state['values']['user_dept'] : NULL,
//  );

  $form['back5'] = array(
    '#type'  => 'submit',
    '#value' => t('Back'),
    '#submit' => array('rc_res_form_page_sixb_handler_submit'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Confirm'),
    '#submit' => array('rc_res_form_page_six_handler_submit'),
  );

  return $form;
}

/**
 * page 7 - Finish ......................................................................................................................
 * page 7 - Finish ......................................................................................................................
 * page 7 - Finish ......................................................................................................................
 */
function rc_res_form_page_seven($form, &$form_state) {
global $user;

  // email must exist to get to this point
  $rc_user = rc_session_variable_get('rc-res','rc_user');  
  $my_email = $rc_user->mail;

$working_uid = rc_session_variable_get('rc-res','working_uid');
  $str_create = array(
    'description' => 'RC-Res',
    'start' => '2012-12-25 02:00 PM',
    'end' => '2012-12-25 02:30 PM',
    'pending' => true,
    'numberOfAttendees' => 3,
    'email' => 'darrowco@library.ucla.edu',
    'phone' => '310-206-5565',
    'firstName' => 'Darrow',
    'lastName' => 'Cole',
    'academicDept' => 'Other',
    'academicDeptOther' => 'Education',
    'division' => 'Staff',
    'courseLevel' => 'Meeting',
    'srs' => '111222333',
    'computerUse' => 'No',
    'internalNotes' => 'Testing web service, I will delete',
    'uid' => '502673598',
  );

  $delimiter = ':::';
  $string = $form_state['page_values'][5]['table'];
  $sub_array = explode ( $delimiter, $string );
  $rrid = $sub_array[0];

  // use this resource id for testing; find a time it is currently reserves to test error return: 400
  // $rrid = '225';

  $rstart = $sub_array[1];
  $rend_oem = $sub_array[2]; // use later to compare $rend with $rstart+$res_length???
  $rcapacity = $sub_array[3];
  $rtitle = $sub_array[4];
  $rdescription = $sub_array[5];
  // get the length of the reservation //dhc this needs to be generic for any length
  $res_length = $form_state['page_values'][6]['res_length'];
  if ( $res_length == 60 ) {
    $res_length = 3600;
  } else if ( $res_length == 90 ) {
    $res_length = 5400;
  } else if ( $res_length == 120 ) {
    $res_length = 7200;
  } else if ( $res_length == 150 ) {
    $res_length = 9000;
  } else if ( $res_length == 180 ) {
    $res_length = 10800;
  } else if ( $res_length == 210 ) {
    $res_length = 12600;
  } else if ( $res_length == 240 ) {
    $res_length = 14400;
  } else {
    $res_length = 3600;
  }

  $rend = date('Y-m-d h:i A', strtotime($rstart)+$res_length);
  $rcap = $sub_array[3];
  $rcap = $form_state['page_values'][6]['pnumber'];
//  $ufname = $form_state['page_values'][1]['user_name'];
//  $ulname = $form_state['page_values'][1]['user_pwd'];
  $uemail = $form_state['page_values'][6]['user_email'];
//  $udept = $form_state['page_values'][6]['user_dept'];
  $course_level = 0;

  // Improvement needed: 
  $str_create1 = array(
    'description' => 'RC-Res',
    'start' => $rstart,
    'end' => $rend,
    'pending' => true,
    'numberOfAttendees' => $rcap,
    'email' => $uemail,
    'phone' => '310-206-5565',
    'firstName' => rc_session_variable_get('rc-res','name_first'),
    'lastName' => rc_session_variable_get('rc-res','name_last'),
//    'academicDept' => $udept,
    'academicDeptOther' => 'Education',
    'division' => 'Staff',
    'courseLevel' => $course_level,
    'srs' => '111222333',
    'computerUse' => 'No',
    'internalNotes' => 'RC Reservation',
    'uid' => $working_uid,
  );

// test array for conflicting reservation test
//  $str_create1 = array(
//    'description' => 'testing ',
//    'start' => '2013-04-24 05:30 PM',
//    'end' => '2013-04-24 06:30 PM',
//    'pending' => true,
//    'numberOfAttendees' => '2',
//    'email' => 'darrowco@library.ucla.edu',
//    'phone' => '310-206-5565',
//    'firstName' => 'darrow',
//    'lastName' => 'cole',
//    'academicDept' => 'DIIT',
//    'academicDeptOther' => 'Education',
//    'division' => 'Staff',
//    'courseLevel' => 0,
//    'srs' => '111222333',
//    'computerUse' => 'No',
//    'internalNotes' => 'Testing web service, I will delete',
//    'uid' => '502673598',
////    'uid' => '603513612',
//  );

  // create the new reservation
  $response = array();
  $response = rc_res_set_user_reservations($rrid, $str_create1);

  // send a confirmation email
  $dDate = 0;
  $mySpace = '';
  // re-read the user's reservations to catch anything new
  $rows = rc_res_get_user_reservations($working_uid);
  // if at least one row was returned, loop through each row  
  if (!empty($rows['reservation'])) {
    // set the email content, spacing and cr/lf effect the email layout
    if( $preg_match_ret = preg_match("/400/", $response->code) ){
      $body = '
<br>Sorry, your reservation could not be completed. Someone may have reserved the space you wanted. Please click on the <i>Change reservation</i> button and try a different date/time and/or resource.<br>
<br>
Current Reservation(s):
<b></b>';
    } else {
      $u_rstart=strtotime($rstart); // use to pick put the new reservation below
      foreach($rows['reservation'] as $row) {
	// each element of the array is keyed with the lcnt
	$startDate = strtotime($row['startDate']);
	if( $u_rstart == $startDate ){
	  $endDate = strtotime($row['endDate']);
	  $newRoomName = $row['title'];
	  $newStartDate = date('l, F j \a\t g:ia',$startDate);
	  $newEndDate = date('l, F j \a\t g:ia',$endDate);
	}
      }
      $body = '
<br>You have successfully reserved <em>'.$newRoomName.'</em> from <em>'.$newStartDate.'</em> to <em>'.$newEndDate.'</em>. Please bring your current Bruincard to the CLICC Laptop Lending Desk in the Research Library to claim your reservation. You can only claim your reservation from fifteen minutes before until fifteen minutes after the beginning of your reservation. Unclaimed reservations will be canceled. Laptop display adapters and dry erase markers and erasers are available for check out.
<b></b>';
    }


    foreach($rows['reservation'] as $row) {
      // each element of the array is keyed with the lcnt
      $roomName = 'Reservation for: '.$row['title'].'<br>';
//      $roomName = $row['roomName'];
      $startDate = strtotime($row['startDate']);
      $endDate = strtotime($row['endDate']);
      $schedID = $row['schedID'];
      $dDate = ($endDate-$startDate)/3600;
      if( $u_rstart == $startDate ){
	$body = $body.'
'.'<br><br>'.$mySpace.'
'.'<b>'.$roomName.'
'.'   Date/Time: '.date('g:ia \o\n l jS F Y',$startDate).'<br>'.'
'.'   Duration: '.$dDate.' hour(s)</b>
<b></b>
';
      } else {
	$body = $body.'
'.'<br><br>'.$mySpace.'
'.''.$roomName.'
'.'   Date/Time: '.date('g:ia \o\n l jS F Y',$startDate).'<br>'.'
'.'   Duration:'.$dDate.' hour(s)
<b></b>
';
      }
    }
  } else if( $preg_match_ret = preg_match("/400/", $response->code) ){
      $body = '
<br>Sorry, your reservation could not be completed. Someone may have reserved the space you wanted. Please click on the <i>Change reservation</i> button and try a different date/time and/or resource.<br>
<br>
Current Reservation(s):<br>
No existing reservations
<b></b>';
  }
  $to = $uemail;
  $from = 'no-reply@library.ucla.edu';
  // If you are using suhosin (the hardened PHP extension) and want to use
  // Cc or Bcc, then make sure that suhosin.mail.protect is not set to 2,
  // or the mail will be rejected as an attack.
  $header_bcc = '';
  $header_cc = '';
  $subject = 'Research Commons Reservation Confirmation';
  // you can set 'message_key' to any key you want, and process
  // that in the hook_mail as shown in the commented out code.
  // Or, just set it to some string and ignore it as we are here.
  // You can add extra headers into the headers array here.  If you
  // are trying to send an HTML formatted email, please use either
  // the MIME Mail or HTMLMail modules, rather than doing it
  // by just setting the Content-Type.


  // If you are using suhosin (the hardened PHP extension) and want to use
  // Cc or Bcc, then make sure that suhosin.mail.protect is not set to 2,
  // or the mail will be rejected as an attack.
  $header_bcc = '';
  $header_cc = '';
  // you can set 'message_key' to any key you want, and process
  // that in the hook_mail as shown in the commented out code.
  // Or, just set it to some string and ignore it as we are here.
  // You can add extra headers into the headers array here.  If you
  // are trying to send an HTML formatted email, please use either
  // the MIME Mail or HTMLMail modules, rather than doing it
  // by just setting the Content-Type.

$email_body = $body;
$module = 'rc_res';
$key = 'message_key';
$lang = user_preferred_language($user);
$params = array(
  'body' => $body,
  'subject' => $subject,
  );

$body = array();
$body[] = $email_body;
$mail_message = drupal_mail($module, $key, $to, $lang, $params, $from, FALSE);
$mail_message['subject'] = $subject;
$mail_message['body'] = $body;

$mail_system = drupal_mail_system($module, $key);
$mail_message = $mail_system->format($mail_message);

$mail_message['result'] = $mail_system->mail($mail_message);



//  $message = drupal_mail('rc_res', 'message_key', $to, user_preferred_language($user), array('body' => $body, 'subject' => $subject, 'headers' => array('Cc' => $header_cc, 'Bcc' => $header_bcc)), $from, TRUE);
  // You can check $message['result'] to see if the message sent successfully.

  $form = array();
  $form['description'] = array
  (
    '#type'  => 'item',
    '#markup' => t(ucfirst(rc_session_variable_get('rc-res','name_first')).' '.ucfirst(rc_session_variable_get('rc-res','name_last')).'&nbsp;( <a href="yrl-logout">logout</a> )<br><br>
Your Reservations > Date & Time > Available Resources > Details > <B>Finish</B> &nbsp;&nbsp;&nbsp;<br>'.$email_body),
  );

  // Show the change button only whenthe reservation failed on submit
  if (preg_match("/400/", $response->code)) {
    $form['submit'] = array(
      '#type'  => 'submit',
      '#value' => t('Change reservation'),
      '#submit' => array('rc_res_form_page_seven_handler_submit'),
    );
  } else {
    $form['view'] = array(
      '#type'  => 'submit',
      '#value' => t('Go back to start to View or Edit Reservation(s)'),
      '#submit' => array('rc_res_form_page_seven_handler_submit'),
    );


  $email_sent_to = '<br>An email confirmation containing all details has been sent to: '.$my_email.'.';


  $form['description3'] = array
  (
    '#type'  => 'item',
    '#markup' => t($email_sent_to),
  );

  }
  return $form;
}
/**
 * End of form -------------------------------------------------------------------------------------------------------
 * End of form -------------------------------------------------------------------------------------------------------
 * End of form -------------------------------------------------------------------------------------------------------
 */

/**
 * Logout submit handler
 * Logout submit handler
 * Logout submit handler
 *
 * Logout from both Drupal and Shibboleth
 */
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.
function yrl_logout_handler_submit($form, &$form_state) {
  session_destroy();
  drupal_goto(variable_get('shib_auth_full_logout_url'));
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 1 submit handler.
 * Page 1 submit handler.
 * Page 1 submit handler.
 *
 * Save the vals from page one for a later final submit.
 */
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.
function rc_res_form_page_one_handler_submit($form, &$form_state) {
  $form_state['page_values'][1] = $form_state['values'];

  // set page num if it does not yet exist, ie this is the first pass
  if (empty($form_state['page_num'])) { $form_state['page_num'] = 1; } 

  // UPDATE: skip page 2 and go to page 3 per committee decision, save page 2 in case it is needed in the future
  // else go forward to page 2
  $form_state['page_num'] = 3;

  $form_state['rebuild'] = TRUE;
}

/**
 * Page 2 submit handler.
 * Page 2 submit handler.
 * Page 2 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_two_handler_submit($form, &$form_state) {
  $form_state['page_values'][2] = $form_state['values'];

  if (!empty($form_state['page_values'][3])) {
    $form_state['values'] = $form_state['page_values'][3];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 3;
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 3 submit handler.
 * Page 3 submit handler.
 * Page 3 submit handler.
 *
 * Save the vals from page three for a later final submit.
 */
function rc_res_form_page_three_handler_submit($form, &$form_state) {
  $form_state['page_values'][3] = $form_state['values'];

  // zero out any previous choice by the user
  $userDate = array();
  rc_session_variable_set('rc-res','userDate', $userDate);

  if (!empty($form_state['page_values'][4])) {
    $form_state['values'] = $form_state['page_values'][4];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 3 delete handler.
 * Page 3 delete handler.
 * Page 3 delete handler.
 *
 * Save the vals from page three for a later final submit.
 */
function rc_res_form_page_three_delete_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.
    // delete any rows with set checkboxes from previous page
    foreach ($form_state['values'][0] as $pid_del) {
      // tableselect sets the checkbox vals to strings 0,1,2,... but to integer 0 if not selected so for element 0,
      //  the val is int 0 if not selected, string 0 if selected, the others are autoconverted
      if( ($pid_del == '0' && is_string($pid_del)) || $pid_del > 0 ){
	$working_rid = $form_state['complete form'][1]['rendered'][0]['#options'][$pid_del]['schedID'];
	$dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
	$url_stack = "$dev_host_resource_base"."/rcres/reservation/release/" . "$working_rid";
	//$url_stack = "http://webservices.library.ucla.edu/rcres/reservation/release/" . "$working_rid";
	$url = $url_stack;
	$response = drupal_http_request($url,
	  array(
	    'method' => 'DELETE',
	    'headers' => array('Pragma" => "no-cache', 'Cache-Control' => 'no-cache'),
	  )
	);
	if( $response->status_message == 'OK' ){
	  rc_session_variable_set('rc-res','reservation_was_deleted', 1); // this is used in page 3 and set in the page 3 delete handler
	} else {
	  rc_session_variable_set('rc-res','reservation_was_deleted', 0); // this is used in page 3 and set in the page 3 delete handler
	}
      }
    }

    $llcnt = 5;

    for ($i=0; $i<$llcnt; $i++){
      $form_state['values'][0][$i] = 0;
    }

  $form_state['input'][0][0] = NULL;
  $form_state['input'][0][1] = NULL;
  $form_state['input'][0][2] = NULL;
  $form_state['page_values'][3] = $form_state['values']; // no reaseon to save, it only makes the check box sticky which is not desireable when the rows shift up after a deletion
  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 3;
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 4 submit handler.
 * Page 4 submit handler.
 * Page 4 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_four_handler_submit($form, &$form_state) {
  $form_state['page_values'][4] = $form_state['values'];
  if (!empty($form_state['page_values'][5])) {
    $form_state['values'] = $form_state['page_values'][5];
  }

  // get the current time/date from server
  $nowDate = strtotime("now");

  // get the user's selection
  $userDate = strtotime($form_state['page_values'][4]['date']);

  // save the zones for use in the handler
  $zone = rc_session_variable_get('rc-res','zone');

  // print out ranges for the user
  $zonePoints = sizeof( $zone );

  $i = 0;
  $outOfRange = 0;
  $zoneOk = 0;
  $zoneRange = '';
  while ($i < $zonePoints) {
    if (  !empty($zone[$i]) && !empty($zone[$i+1]) && $zoneOk==0  ) {
      // is the user specified date/time within a zone? Pad the upper limit by 30 minutes because of earlier rounding; eg choosing a 3:30pm resv would fail if the realtime is between 3:00 and 3:30
      if( !( $userDate>=$zone[$i]&&$userDate<=$zone[$i+1]+1800 ) ){
	$outOfRange = 1;
      // is the user specified date/time during operating hours? (simplified for now, need to pull actual hours in the future)
      } else if( !(( date('G', $userDate)>='8' && date('i', $userDate)>='30' )  ||  ( date('G', $userDate)<='21' && date('i', $userDate)<='30' )) ) {
	$outOfRange = 1;
      } else {
	$outOfRange = 0;
	$zoneOk = 1;
      }
    }
    $i+=2;
  }

  $no_res_available = 0;
  // if the user picked time/date falls within a legal time slot
  if( $outOfRange == 0 ){
    rc_session_variable_set('rc-res','outOfRange', $outOfRange);

    // read reervations given an UID (currently simulated in drupal)
    $rows = array();
    $rows = rc_res_get_resources_for_period_complete($form, $form_state);

    // if there are no free resources at the time chosen
    if ( $rows == 'Not Found' ){
      $no_res_available = 1;
      rc_session_variable_set('rc-res','no_res_available', $no_res_available);
    }
  } else {
    rc_session_variable_set('rc-res','outOfRange', $outOfRange);
  }

  // is the user's selection time for a new reservation too early or too close to an existing reservation? Is the too early part covered by the new too close test???
  if( $outOfRange==1 || $no_res_available==1 ){
    $form_state['page_num'] = 4;
    $form_state['rebuild'] = TRUE;
  } else {
    // the user's selection is ok, continue on to the next step
    // When form rebuilds in n+2 or so, use this to determine which page to build.
    rc_session_variable_set('rc-res','firstAccess4', 0);
    $form_state['page_num'] = 5;
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Page 4 back submit handler.
 * Page 4 back submit handler.
 * Page 4 back submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_fourb_handler_submit($form, &$form_state) {
  $form_state['page_values'][4] = $form_state['values'];

  if (!empty($form_state['page_values'][3])) {
    $form_state['values'] = $form_state['page_values'][3];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 3;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 5 submit handler.
 * Page 5 submit handler.
 * Page 5 submit handler.
 *
 * Save the vals from page five for a later final submit.
 */
function rc_res_form_page_five_handler_submit($form, &$form_state) {
  $form_state['page_values'][5] = $form_state['values'];

  // retrieve selection details
  $delimiter = ':::';
  $string = $form_state['complete form']['table']['#value'];
  $sub_array = explode ( $delimiter, $string );
  $rrid = $sub_array[0];
  $rstart = $sub_array[1];
  $rend_oem = $sub_array[2]; // use later to compare $rend with $rstart+$res_length???
  $rcapacity = $sub_array[3];
  $rtitle = $sub_array[4];
  $rdescription = $sub_array[5];
  $rhours_available = $sub_array[6];
  rc_session_variable_set('rc-res','rtitle',$rtitle);

  if (!empty($form_state['page_values'][5]['table'])) {
    if (!empty($form_state['page_values'][6])) {
      $form_state['values'] = $form_state['page_values'][6];
    }

    // When form rebuilds in n+2 or so, use this to determine which page to build.
    $form_state['page_num'] = 6;
    $form_state['rebuild'] = TRUE;
  } else {
    $form_state['page_num'] = 5;
    $form_state['rebuild'] = TRUE;
  }
 }

/**
 * Page 5 back submit handler.
 * Page 5 back submit handler.
 * Page 5 back submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_fiveb_handler_submit($form, &$form_state) {
  $form_state['page_values'][5] = $form_state['values'];

  if (!empty($form_state['page_values'][4])) {
    $form_state['values'] = $form_state['page_values'][4];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 5 empty submit handler.
 * Page 5 empty submit handler.
 * Page 5 empty submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_five_empty_handler_submit($form, &$form_state) {
  if (!empty($form_state['page_values'][6])) {
    $form_state['values'] = $form_state['page_values'][6];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 6 submit handler.
 * Page 6 submit handler.
 * Page 6 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_six_handler_submit($form, &$form_state) {
  $form_state['page_values'][6] = $form_state['values'];

  if (!empty($form_state['page_values'][7])) {
    $form_state['values'] = $form_state['page_values'][7];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 7;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 6 back submit handler.
 * Page 6 back submit handler.
 * Page 6 back submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_sixb_handler_submit($form, &$form_state) {
  $form_state['page_values'][6] = $form_state['values'];

  if (!empty($form_state['page_values'][5])) {
    $form_state['values'] = $form_state['page_values'][5];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 5;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 7 submit handler.
 * Page 7 submit handler.
 * Page 7 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_form_page_seven_handler_submit($form, &$form_state) {
  $form_state['page_values'][7] = $form_state['values'];

  if (preg_match("/View/", $form_state['clicked_button']['#value'])) {
    $form_state['page_num'] = 3;
  } else {
    $form_state['page_num'] = 4;
  }
    $form_state['rebuild'] = TRUE;
  }

/**
 * get user category from Voyager
 * get user category from Voyager
 * get user category from Voyager
 */
function rc_res_get_user_category($working_uid) {
  // get patron status from Voyager
  $dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
  $url_stack = "$dev_host_resource_base"."/rcres/patron/group/" . "$working_uid"; // same category source for workstation, drupaltest and production
  $url = $url_stack . 

  drupal_http_build_query(array());
  $options = array(
    "headers" => array(
        "Pragma" => "no-cache",
        "Cache-Control" => "no-cache",
    ),
  );
  $response_voy = drupal_http_request($url, $options);
  $patron_status = $response_voy->data;
//dsm($patron_status);
  if (preg_match("/\bUndergraduate\b/ii", $patron_status)) {
    $patron_status = "Undergraduate";
  } elseif (preg_match("/\bGraduate\b/ii", $patron_status)) {
    $patron_status = "Graduate";
  } elseif (preg_match("/\bFaculty\b/ii", $patron_status)) {
    $patron_status = "Faculty";
  }
//dsm($patron_status);
  return $patron_status;
}

/**
 * get user rules from rules table
 * get user rules from rules table
 * get user rules from rules table
 */
function rc_res_get_user_rules($user_category) {
global $user;
  $uid_from_drupal = 0;
  // read reervations given an UID (currently simulated in drupal)
  $entries = array();
  // select table
  $select = db_select('rc_res_rules', 'e');
  // fields to read
  $select->addField('e', 'cls_lim');
  $select->addField('e', 'gsr_lim');
  $select->addField('e', 'pod_lim');
  $select->addField('e', 'cls_adv');
  $select->addField('e', 'gsr_adv');
  $select->addField('e', 'pod_adv');
  $select->addField('e', 'multi_res');
  $select->addField('e', 'time_per');
  $select->addField('e', 'time_unit');
  $select->addField('e', 'group_verify');
    // read in only records that match te he current users uid
  $select->condition('e.user_group', $user_category);
  // Now, loop all these entries and show them in a table. Note that there is no
  // db_fetch_* object or array function being called here. Also note that the
  // following line could have been written as
  // $entries = $select->execute()->fetchAll() which would return each selected
  // record as an object instead of an array.
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($entries)) {
    $user_rules = $entries;
  }
  else {
    $user_rules = -1;
  }
  return $user_rules;
}

/**
 * get list of user reservations
 * get list of user reservations
 * get list of user reservations
 */
function rc_res_get_user_reservations($working_uid) {
  // get patron status from Voyager
  $dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
  $url_stack = "$dev_host_resource_base"."/rcres/currentreservations/for/" . "$working_uid";
  $url = $url_stack;
  $test = drupal_http_build_query(array());
  $options = array(
    "headers" => array(
        "Pragma" => "no-cache",
        "Cache-Control" => "no-cache",
    ),
  );
  $response_voy = drupal_http_request($url, $options);
  $patron_reservations = $response_voy->data;
  $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);
  return $patron_reservations_array;
}

/**
 * get list of available resources at starting time given start date/time
 * get list of available resources at starting time given start date/time
 * get list of available resources at starting time given start date/time
 */
function rc_res_get_resources_for_period($form, $form_state) {
  // test and setup string
  //$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2013-01-17+07%3a00+PM/until/96/length/1';
  $ucla_locale = session_variable_get('powell-res','ucla_locale');

  $delimiter = ' ';
  $string = $form_state['page_values'][4]['date'];
  $sub_array = explode ( $delimiter, $string );
  $rdate = $sub_array[0];

  $rtime = $sub_array[1];
  $rtime12h = date("h", strtotime($rtime));
  $rtime12m = date("i", strtotime($rtime));
  $rtime12a = date("a", strtotime($rtime));

  $rlength = 30; // temp, get from rules
  $rlength =   $rlength/30;


  $dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
  $request_url = '$dev_host_resource_base'.'/rcres/availablerooms/startingat/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/length/'."$rlength".'/where/'."$ucla_locale";
  $request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $request_method = 'POST';
  $data = '';
  $request_retry = 3;
  // Send the request.
  $response_voy = drupal_http_request($request_url, $request_headers, $request_method, $data, $request_retry);

  if ($response_voy->data == "[]" ) {
    return "Not Found";
  } else {
    $patron_reservations = $response_voy->data;
    $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

  //dsm($patron_status);
    return $patron_reservations_array;
  }
}

/**
 * get list of available resources at starting time given start date/time
 * get list of available resources at starting time given start date/time
 * get list of available resources at starting time given start date/time
 */
function rc_res_get_resources_for_period_complete($form, $form_state) {

  $ucla_locale = session_variable_get('powell-res','ucla_locale');

  // test and setup string
  //$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2013-01-17+07%3a00+PM/until/96/length/1';
  $delimiter = ' ';
  $string = $form_state['page_values'][4]['date'];
  $sub_array = explode ( $delimiter, $string );
  $rdate = $sub_array[0];

  $rtime = $sub_array[1];
  $rtime12h = date("h", strtotime($rtime));
  $rtime12m = date("i", strtotime($rtime));
  $rtime12a = date("a", strtotime($rtime));

  $my_kvar = rc_session_variable_get('rc-res','rc_res_get_user_rules');
  $my_kvar = $my_kvar[0]['pod_lim'];
  $rlength = $my_kvar/30;

  // this is set at the top; change at the top when releasing to test/production; needs automation
  $dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
  $request_url = "$dev_host_resource_base"."/rcres/availablerooms/complete/startingat/"."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/length/'."$rlength".'/where/'."$ucla_locale";
  $request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $request_method = 'POST';
  $data = '';
  $request_retry = 3;
  // Send the request.
  $response_voy = drupal_http_request($request_url, $request_headers, $request_method, $data, $request_retry);

  if ($response_voy->data == "[]" ) {
    return "Not Found";
  } else {
    $patron_reservations = $response_voy->data;
    $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

  //dsm($patron_status);
  return $patron_reservations_array;
  }
}

/**
 * set new user reservations
 * set new user reservations
 * set new user reservations
 */
function rc_res_set_user_reservations($rrid, $str_create1) {
  $params = array();
  $params = json_encode($str_create1);
  $dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
  $response = drupal_http_request($dev_host_resource_base.'/rcres/reservation/reserveroom/'.$rrid, array(
    'method' => 'POST',
    'data' => $params, // see comments below - you may need to change this
    'headers' => array('Content-Type' => 'application/json')
  ));
  return $response;
}

/**
 * used for testing of reservation setting
 * used for testing of reservation setting
 * used for testing of reservation setting
 */
function rc_res_set_user_reservations_0($working_uid) {

  $c_array = array(
    'description' => 'RC-Res',
    'start' => '2012-09-20 08:00 AM',
    'end' => '2012-09-20 10:00 AM',
    'pending' => true,
    'numberOfAttendees' => 2,
    'email' => 'darrowco@library.ucla.edu',
    'phone' => '310-206-9780',
    'firstName' => 'Darrow',
    'lastName' => 'Cole',
    'academicDept' => 'Other',
    'academicDeptOther' => 'Education',
    'division' => 'Staff',
    'courseLevel' => 'Meeting',
    'srs' => '111222333',
    'computerUse' => 'No',
    'internalNotes' => 'Testing web service, I will delete',
    'uid' => '502673598',
  );

  $params = json_encode($c_array);

  $dev_host_resource_base = rc_session_variable_get('rc-res','dev_host_resource_base');
  $url_stack = "$dev_host_resource_base"."/rcres/reservation/reserveroom/118"; // same category source for workstation, drupaltest and production
  $url = $url_stack;
  $response = drupal_http_request($url, array(
    'method' => 'POST',
    'data' => $params, // see comments below - you may need to change this
    'headers' => array('Content-Type' => 'application/json')
  ));
}

/**
 * session variable functions
 * session variable functions
 * session variable functions
 *
 * Based on code from Peter Moulding http://petermoulding.com/session_variable
 */
function rc_session_variable_check_session()
	{
	return session_id() != '';
	}

function rc_session_variable_check_module($module4rc)
	{
	$module_safe4rc = rc_session_variable_safe($module4rc);
	if($module_safe4rc !== $module4rc or isset($_SESSION[$module4rc]))
		{
		return false;
		}
	return true;
	}

function rc_session_variable_delete($module4rc, $name4rc)
	{
	if(rc_session_variable_is($module4rc, $name4rc))
		{
		$module4rc = rc_session_variable_safe($module4rc);
		$name4rc = rc_session_variable_safe($name4rc);
		unset($_SESSION[$module4rc][$name4rc]);
		if(!count($_SESSION[$module4rc]))
			{
			unset($_SESSION[$module4rc]);
			}
		return true;
		}
	return false;
	}

function rc_session_variable_is($module4rc, $name4rc)
	{
	$module4rc = rc_session_variable_safe($module4rc);
	$name4rc = rc_session_variable_safe($name4rc);
	return (isset($_SESSION[$module4rc]) and isset($_SESSION[$module4rc][$name4rc]));
	}

function rc_session_variable_get($module4rc, $name4rc, $default_value = '')
	{
	if(rc_session_variable_is($module4rc, $name4rc))
		{
		$module4rc = rc_session_variable_safe($module4rc);
		$name4rc = rc_session_variable_safe($name4rc);
		return $_SESSION[$module4rc][$name4rc];
		}
	return $default_value;
	}

function rc_session_variable_set($module4rc, $name4rc, $value = '')
	{
	$module4rc = rc_session_variable_safe($module4rc);
	$name4rc = rc_session_variable_safe($name4rc);
	$_SESSION[$module4rc][$name4rc] = $value;
	}

/*
Is the module name or the variable name safe for use as an entry in the session?
This function returns a safe version of the name.
*/
function rc_session_variable_safe($name4rc = '')
	{
	return htmlentities($name4rc);
	}
